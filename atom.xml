<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bioinformatic</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-09-13T01:18:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hao Xuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Classes</title>
    <link href="http://yoursite.com/2021/09/13/Classes/"/>
    <id>http://yoursite.com/2021/09/13/Classes/</id>
    <published>2021-09-13T16:30:54.101Z</published>
    <updated>2021-09-13T01:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>If a class has ten or more public methods, excluding constructor, destructor, access methods, and private/protected methods, we should split the class into smaller classes.</p><p>For example, in the Graph class, methods, like getNode(), getSize(), isEmpty() etc. should not be counted as those 10 public methods; while DFS(), removeNode() etc. should be counted.</p><p>For the Graph class, we only have two public methods, DFS() and removeNode(), although there are more than ten methods.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">   Graph()&#123;&#125;;</span><br><span class="line">   Graph(..,..)&#123;&#125;;</span><br><span class="line">   Graph(..,..,..)&#123;&#125;;</span><br><span class="line">   Graph(..,..,..,..)&#123;&#125;;</span><br><span class="line">   DFS();</span><br><span class="line">   removeNode();</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getNode</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="keyword">int</span> max_vertex_</span><br><span class="line">   <span class="keyword">int</span> num_vertex_</span><br><span class="line">   <span class="keyword">int</span> num_edge_;</span><br><span class="line">   <span class="keyword">char</span>* vertex;</span><br><span class="line">   <span class="keyword">int</span>** edge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Nested-Classes"><a href="#Nested-Classes" class="headerlink" title="Nested Classes"></a>Nested Classes</h1><p>A class can define another class within it; this is also called a member class.</p><p>Normally, the number of nested classes cannot exceed two.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// MyTest is a member class, nested within Test.</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h1><p>A class is made abstract by declaring at least one of its functions as pure virtual function. A pure virtual function is specified by placing “= 0” in its declaration as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// pure virtual function</span></span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">double</span> length;      <span class="comment">// Length of a box</span></span><br><span class="line">      <span class="keyword">double</span> breadth;     <span class="comment">// Breadth of a box</span></span><br><span class="line">      <span class="keyword">double</span> <span class="built_in">height</span>;      <span class="comment">// Height of a box</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Abstract-Class-Example"><a href="#Abstract-Class-Example" class="headerlink" title="Abstract Class Example"></a>Abstract Class Example</h2><p>Consider the following example where the parent class provides an interface to the base class to implement a function called getArea() −</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Base class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// pure virtual function providing interface framework.</span></span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">         <span class="built_in">width</span> = w;</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">         <span class="built_in">height</span> = h;</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="keyword">int</span> <span class="built_in">width</span>;</span><br><span class="line">      <span class="keyword">int</span> <span class="built_in">height</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Derived classes</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123; </span><br><span class="line">         <span class="keyword">return</span> (<span class="built_in">width</span> * <span class="built_in">height</span>); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span>:</span> <span class="keyword">public</span> Shape &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123; </span><br><span class="line">         <span class="keyword">return</span> (<span class="built_in">width</span> * <span class="built_in">height</span>)/<span class="number">2</span>; </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Rectangle Rect;</span><br><span class="line">   Triangle  Tri;</span><br><span class="line"> </span><br><span class="line">   Rect.setWidth(<span class="number">5</span>);</span><br><span class="line">   Rect.setHeight(<span class="number">7</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Print the area of the object.</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Total Rectangle area: "</span> &lt;&lt; Rect.getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   Tri.setWidth(<span class="number">5</span>);</span><br><span class="line">   Tri.setHeight(<span class="number">7</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Print the area of the object.</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Total Triangle area: "</span> &lt;&lt; Tri.getArea() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.tutorialspoint.com/cplusplus/cpp_interfaces.htm" target="_blank" rel="noopener">Interfaces in C++ (Abstract Classes)</a></p><p><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">Google C++ Style Guide</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Class&quot;&gt;&lt;a href=&quot;#Class&quot; class=&quot;headerlink&quot; title=&quot;Class&quot;&gt;&lt;/a&gt;Class&lt;/h1&gt;&lt;p&gt;If a class has ten or more public methods, excluding const
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Headerfile</title>
    <link href="http://yoursite.com/2021/09/13/Headerfile/"/>
    <id>http://yoursite.com/2021/09/13/Headerfile/</id>
    <published>2021-09-13T16:30:54.101Z</published>
    <updated>2021-09-13T01:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Header-Files"><a href="#1-Header-Files" class="headerlink" title="1 Header Files"></a>1 Header Files</h1><h2 id="1-1-The-define-guard"><a href="#1-1-The-define-guard" class="headerlink" title="1.1 The #define guard"></a>1.1 The #define guard</h2><p>All header files should have #define guards to prevent multiple inclusion. The format of the<br>symbol name should be</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__&lt;HEADERNAME&gt;_H__</span><br></pre></td></tr></table></figure><p>To guarantee uniqueness, they should be based on the full name in a header file. For example, the file Seed.h in project VAT should have the following guard.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SEED_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SEED_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __SEED_H__</span></span></span><br></pre></td></tr></table></figure><h2 id="1-2-Function-Parameter-Ordering"><a href="#1-2-Function-Parameter-Ordering" class="headerlink" title="1.2 Function Parameter Ordering"></a>1.2 Function Parameter Ordering</h2><p>When defining a function, parameter order is: inputs, then outputs.</p><h2 id="1-3-Names-Order-of-Includes"><a href="#1-3-Names-Order-of-Includes" class="headerlink" title="1.3 Names Order of Includes"></a>1.3 Names Order of Includes</h2><p>Use standard order for readability and to avoid hidden dependencies: C library, C++ library, other libraries’ .h, your project’s .h.<br>For example,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hash_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ben/project.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zhong/czproject.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myproject.h"</span></span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">Google C++ Style Guide</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Header-Files&quot;&gt;&lt;a href=&quot;#1-Header-Files&quot; class=&quot;headerlink&quot; title=&quot;1 Header Files&quot;&gt;&lt;/a&gt;1 Header Files&lt;/h1&gt;&lt;h2 id=&quot;1-1-The-define-gu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Naming</title>
    <link href="http://yoursite.com/2021/09/13/Naming/"/>
    <id>http://yoursite.com/2021/09/13/Naming/</id>
    <published>2021-09-13T16:30:54.101Z</published>
    <updated>2021-09-13T01:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h1><h2 id="General-Naming-Rules"><a href="#General-Naming-Rules" class="headerlink" title="General Naming Rules"></a>General Naming Rules</h2><p>Function names, variable names, and filenames should be descriptive; eschew abbreviation.</p><p>Types and variables should be nouns, while functions should be “command” verbs.</p><p>For example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num_errors; <span class="comment">// Good.</span></span><br><span class="line"><span class="keyword">int</span> num_completed_connections; <span class="comment">// Good.</span></span><br></pre></td></tr></table></figure><h2 id="File-Names"><a href="#File-Names" class="headerlink" title="File Names"></a>File Names</h2><p>Filenames should start with a capital letter and have a capital letter for each new word.</p><p>Examples of acceptable file names:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyUsefulClass.cpp</span><br><span class="line">MyClass.cpp</span><br><span class="line">MyUsefulClass.h</span><br><span class="line">MyClass.h</span><br></pre></td></tr></table></figure><p>C++ files should end in .cpp and header files should end in .h.</p><p>Do not use filenames that already exist in /usr/include, such as db.h.</p><h2 id="Type-Names"><a href="#Type-Names" class="headerlink" title="Type Names"></a>Type Names</h2><p>Type names start with a capital letter and have a capital letter for each new word, with no<br>underscores: MyClass, MyEnum.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// classes and structs</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTable</span> &#123;</span> ...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span> ...</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyTestClass</span> &#123;</span> ...</span><br><span class="line"><span class="comment">// typedefs</span></span><br><span class="line"><span class="keyword">typedef</span> hash_map&lt;UrlTableProperties *, <span class="built_in">string</span>&gt; MyHash;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> DataType_AL;</span><br><span class="line"><span class="comment">// enums</span></span><br><span class="line"><span class="keyword">enum</span> MyEnums &#123; ...</span><br></pre></td></tr></table></figure><h2 id="Variable-Names"><a href="#Variable-Names" class="headerlink" title="Variable Names"></a>Variable Names</h2><h3 id="Common-Variable-names"><a href="#Common-Variable-names" class="headerlink" title="Common Variable names"></a>Common Variable names</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> table_name; <span class="comment">// OK uses underscore.</span></span><br><span class="line"><span class="built_in">string</span> tablename; <span class="comment">// OK all lowercase.</span></span><br></pre></td></tr></table></figure><h3 id="Class-and-Struct-Data-Members"><a href="#Class-and-Struct-Data-Members" class="headerlink" title="Class and Struct Data Members"></a>Class and Struct Data Members</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> table_name_; <span class="comment">// OK underscore at end.</span></span><br><span class="line"><span class="built_in">string</span> tablename_; <span class="comment">// OK.</span></span><br></pre></td></tr></table></figure><h2 id="Function-Names"><a href="#Function-Names" class="headerlink" title="Function Names"></a>Function Names</h2><p>Functions should start with a lowercase letter and have a capital letter for each new word. No underscores.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myFunction(MyTable&amp; stu_name)</span><br><span class="line">addTableEntry(<span class="keyword">int</span>&amp; stu_name)</span><br><span class="line">deleteUrl(MyClass&amp; stu_name)</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">Google C++ Style Guide</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Naming&quot;&gt;&lt;a href=&quot;#Naming&quot; class=&quot;headerlink&quot; title=&quot;Naming&quot;&gt;&lt;/a&gt;Naming&lt;/h1&gt;&lt;h2 id=&quot;General-Naming-Rules&quot;&gt;&lt;a href=&quot;#General-Naming-Ru
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SUMMARY</title>
    <link href="http://yoursite.com/2021/09/13/SUMMARY/"/>
    <id>http://yoursite.com/2021/09/13/SUMMARY/</id>
    <published>2021-09-13T16:30:54.101Z</published>
    <updated>2021-09-13T01:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ul><li><a href="Headerfile.md">Header Files</a></li><li><a href="Classes.md">Classes</a></li><li><a href="Naming.md">Naming</a></li><li><a href="Scoping.md">Scoping</a></li><li><a href="Otherfeatures.md">Other C++ Features</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;Headerfile.md&quot;&gt;Header Files&lt;/a&gt;&lt;/li&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Otherfeatures</title>
    <link href="http://yoursite.com/2021/09/13/Otherfeatures/"/>
    <id>http://yoursite.com/2021/09/13/Otherfeatures/</id>
    <published>2021-09-13T16:30:54.101Z</published>
    <updated>2021-09-13T01:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Other-Freatures"><a href="#Other-Freatures" class="headerlink" title="Other Freatures"></a>Other Freatures</h1><h3 id="Prefer-consts-enums-and-inlines-to-define"><a href="#Prefer-consts-enums-and-inlines-to-define" class="headerlink" title="Prefer consts, enums, and inlines to #define"></a>Prefer consts, enums, and inlines to #define</h3><p>If you define the aspect_ratio as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aspect_ratio 1.653</span></span><br></pre></td></tr></table></figure><p>We recommend that you use the following code to replace it:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> aspect_ratio = <span class="number">1.653</span></span><br></pre></td></tr></table></figure><p>When you need a constant value during the compilation phase, const is powerless. At this time you need enum.</p><p>For example, if you define an array:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> scores[numTurns];</span><br></pre></td></tr></table></figure><p>The compiler insists on knowing the size of numTurns. You can use enum at this time:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123;numTurns = <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p>Using #define to implement a macro, the function is the same as a function, but there is no overhead when the function is called, but the macro definition check causes unnecessary errors. The classic one is the comparison of two numbers:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CALL_WITH_MAX(a,b)  f((a)&gt;(b)?(a):(b))</span></span><br></pre></td></tr></table></figure><p>Even if you add parentheses to each variable, there is still an error, that is, when you pass in ++ a, b, when a&gt; b, a plus two times will happen, and you all understand it. You can use the following statement instead:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">callWithMax</span><span class="params">(<span class="keyword">const</span> T&amp; a,<span class="keyword">const</span> T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f(a&gt;b ? a : b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Use-const-whatever-possible"><a href="#Use-const-whatever-possible" class="headerlink" title="Use const whatever possible"></a>Use const whatever possible</h3><p>If you define the myVariable as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> myVariable = <span class="number">0</span>;</span><br><span class="line">myVariable = ComputeFactor(params...);</span><br></pre></td></tr></table></figure><p>We recommend that you use the following code to replace it:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> myVariable = ComputeFactor(params...);</span><br></pre></td></tr></table></figure><p>If you define the str as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str;</span><br><span class="line">str = <span class="string">"Hello World"</span>;</span><br></pre></td></tr></table></figure><p>We recommend that you use the following code to replace it:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> str = <span class="string">"Hello World"</span>;</span><br></pre></td></tr></table></figure><h3 id="Casting"><a href="#Casting" class="headerlink" title="Casting"></a>Casting</h3><p>Use C++ casts like static_cast&lt;&gt;(). Do not use other cast formats like int y =<br>(int)x; or int y = int(x);.<br>The problem with C casts is the ambiguity of the operation; sometimes you are doing a conversion<br>and sometimes you are doing a cast (e.g., (int)”hello”); C++ casts avoid<br>this. Additionally C++ casts are more visible when searching for them.</p><h3 id="Preincrement-and-Predecrement"><a href="#Preincrement-and-Predecrement" class="headerlink" title="Preincrement and Predecrement"></a>Preincrement and Predecrement</h3><p>Use prefix form (++i) of the increment and decrement operators with iterators and other template objects.<br>When the return value is ignored, the “pre” form (++i) is never less efficient than the “post” form<br>(i++), and is often more efficient. This is because postincrement<br>(or decrement) requires a copy of<br>i to be made, which is the value of the expression. If i is an iterator or other nonscalar<br>type, copying i could be expensive. Since the two types of increment behave the same when the value<br>is ignored, why not just always preincrement?</p><h3 id="Integer-Types"><a href="#Integer-Types" class="headerlink" title="Integer Types"></a>Integer Types</h3><p>Of the builtin<br>C++ integer types, the only one used is int. If a program needs a variable of a<br>different size, use a precisewidth<br>integer type from &lt;stdint.h&gt;, such as int16_t.</p><p>The sizes of integral types in C++ can vary based on compiler and architecture.</p><h3 id="0-and-NULL"><a href="#0-and-NULL" class="headerlink" title="0 and NULL"></a>0 and NULL</h3><p>Use 0 for integers, 0.0 for reals, NULL for pointers, and ‘\0’ for chars.</p><p>For pointers (address values), there is a choice between 0 and NULL. Bjarne Stroustrup prefers an<br>unadorned 0. We prefer NULL because it looks like a pointer. In fact, some C++ compilers, such as<br>gcc 4.1.0, provide special definitions of NULL which enable them to give useful warnings,<br>particularly in situations where sizeof(NULL) is not equal to sizeof(0).<br>Use ‘\0’ for chars. This is the correct type and also makes code more readable.</p><h3 id="C-11"><a href="#C-11" class="headerlink" title="C++11"></a>C++11</h3><p>Use only approved libraries and language extensions from C++11 (formerly known as C++0x). Currently, none are approved.</p><p>C++11 has become the official standard, and eventually will be supported by most C++ compilers. It standardizes some common C++ extensions that we use already, allows shorthands for some operations, and has some performance and safety improvements.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">Google C++ Style Guide</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Other-Freatures&quot;&gt;&lt;a href=&quot;#Other-Freatures&quot; class=&quot;headerlink&quot; title=&quot;Other Freatures&quot;&gt;&lt;/a&gt;Other Freatures&lt;/h1&gt;&lt;h3 id=&quot;Prefer-consts
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Scoping</title>
    <link href="http://yoursite.com/2021/09/13/Scoping/"/>
    <id>http://yoursite.com/2021/09/13/Scoping/</id>
    <published>2021-09-13T16:30:54.101Z</published>
    <updated>2021-09-13T01:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scoping"><a href="#Scoping" class="headerlink" title="Scoping"></a>Scoping</h1><h2 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h2><p>Unnamed namespaces in .cpp files are encouraged. With named namespaces, choose the<br>name based on the project, and possibly its path.</p><h3 id="Unnamed-Namespaces"><a href="#Unnamed-Namespaces" class="headerlink" title="Unnamed Namespaces"></a>Unnamed Namespaces</h3><p>Unnamed namespaces are allowed and even encouraged in .cpp files, to avoid runtime<br>naming conflicts:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myspace </span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment">// This is in TestFile.cpp file.</span></span><br><span class="line">    <span class="comment">// The content of a namespace is not indented</span></span><br><span class="line">    <span class="keyword">enum</span> &#123; kUnused, kEOF, kError &#125;; <span class="comment">// Commonly used tokens.</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">atEof</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> pos_ == kEOF; &#125; <span class="comment">// Uses our namespace's EOF.</span></span><br><span class="line">&#125; <span class="comment">// myspace</span></span><br></pre></td></tr></table></figure><p>Do not use unnamed namespaces in .h files.</p><h3 id="Named-namespaces-should-be-used-as-follows"><a href="#Named-namespaces-should-be-used-as-follows" class="headerlink" title="Named namespaces should be used as follows:"></a>Named namespaces should be used as follows:</h3><p>Namespaces wrap the entire source file after includes, gflags definitions/declarations, and<br>forward declarations of classes from other namespaces:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the .h file</span></span><br><span class="line"><span class="keyword">namespace</span> mynamespace </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// All declarations are within the namespace scope.</span></span><br><span class="line"><span class="comment">// Notice the lack of indentation.</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">        void addTest();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="comment">// namespace mynamespace</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the .cpp file</span></span><br><span class="line"><span class="keyword">namespace</span> mynamespace &#123;</span><br><span class="line"><span class="comment">// Definition of functions is within scope of the namespace.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyClass::addTest</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">// namespace mynamespace</span></span><br></pre></td></tr></table></figure><p>Do not declare anything in namespace std, not even forward declarations of standard library<br>classes. Declaring entities in namespace std is undefined behavior, i.e., not portable.</p><p>To declare entities from the standard library, include the appropriate header file.<br>You may not use a usingdirective to make all names from a namespace available.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Forbidden This pollutes the namespace.</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> foo;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">Google C++ Style Guide</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Scoping&quot;&gt;&lt;a href=&quot;#Scoping&quot; class=&quot;headerlink&quot; title=&quot;Scoping&quot;&gt;&lt;/a&gt;Scoping&lt;/h1&gt;&lt;h2 id=&quot;Namespaces&quot;&gt;&lt;a href=&quot;#Namespaces&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
